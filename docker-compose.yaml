version: '3.8'

services:

  db:
    image: postgres:14.6-alpine
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - ${DB_PORT}:${DB_PORT}
    healthcheck:
      test: pg_isready -U ${DB_USER} -d ${DB_NAME}
      interval: 3s
      timeout: 3s
      retries: 5
    volumes:
      - converter_pg_data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}

  api:
    build: .
    restart: always
    env_file:
      - .env
    environment:
      DB_HOST: db
      REDIS_URL: redis://redis:${REDIS_PORT}/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8000:8000"
    volumes:
      - django_static:/app/static
      - ./core/:/app/core/
      - ./users/:/app/users/
      - ./converter/:/app/converter/

  collect_static:
    build: .
    env_file:
      - .env
    environment:
      DB_HOST: db
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    command: python manage.py collectstatic -c --no-input
    volumes:
      - django_static:/app/static

  load_data:
    build: .
    env_file:
      - .env
    environment:
      DB_HOST: db
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    command: python manage.py load_data
    volumes:
      - ./core/:/app/core/
      - ./users/:/app/users/
      - ./converter/:/app/converter/

  celery_worker:
    build: .
    env_file:
      - .env
    environment:
      DB_HOST: db
      REDIS_URL: redis://redis:${REDIS_PORT}/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      api:
        condition: service_started
    command: celery -A core.celery worker --loglevel=info
    volumes:
      - ./core/:/app/core/
      - ./users/:/app/users/
      - ./converter/:/app/converter/

  celery_beat:
    build: .
    env_file:
      - .env
    environment:
      DB_HOST: db
      REDIS_URL: redis://redis:${REDIS_PORT}/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      api:
        condition: service_started
    command: celery -A core.celery beat --loglevel=info
    volumes:
      - ./core/:/app/core/
      - ./users/:/app/users/
      - ./converter/:/app/converter/


volumes:
  django_static:
    driver: local
  converter_pg_data:
    driver: local
